from typing import List
import unittest

# https://leetcode.com/problems/defuse-the-bomb/

# python3 -m unittest slidingwindows/1652-defuse-the-bomb.py

class Solution(unittest.TestCase):
    # # Approach #1: Brute-Force
    # # Time: O(nk), k=abs(k)
    # # Space: O(1)
    # def decrypt(self, code: List[int], k: int) -> List[int]:
    #     n = len(code)
    #     decrypted = [0] * n
    #     step = 1 if k < 0 else -1
    #     for idx in range(n):
    #         for j in range(idx+k, idx, step):
    #             decrypted[idx] += code[(j+n)%n]
    #     return decrypted

    # # # Approach #2: Sliding Window
    # # # Time: O(n+k), k=abs(k)
    # # # Space: O(1)
    # def decrypt(self, code: List[int], k: int) -> List[int]:
    #     if k < 0: return self.decrypt(code[::-1], -k)[::-1]
    #     n = len(code)
    #     decrypted = [0] * n
    #     presum = sum(code[:k])
    #     for idx in range(n):
    #         presum = presum - code[idx] + code[(idx+k) % n]
    #         decrypted[idx] = presum
    #     return decrypted

    # Approach #3: Sliding Window
    # Time: O(n+k), k=abs(k)
    # Space: O(1)
    def decrypt(self, code: List[int], k: int) -> List[int]:
        n, start, end = len(code), 1, k
        if k < 0: start, end = n+k, n-1
        presum = sum(code[idx] for idx in range(start, end+1))
        decrypted = [0] * n
        for idx in range(n):
            decrypted[idx] = presum
            presum = presum - code[start%n] + code[(end+1)%n]
            start, end = start+1, end+1
        return decrypted

    def test(self) -> None:
        for code, k, expected in [
            ([56], 0, [0]),
            ([45,52], 1, [52,45]),
            ([1,2,3,4], 0, [0,0,0,0]),
            ([2,4,9,3], -2, [12,5,6,13]),
            ([5,7,1,4], 3, [12,10,16,13]),
            ([59,80,21,23,92,63], 0, [0,0,0,0,0,0]),
            ([4,10,87,71,36,14,33,91,12,97,41,90,12,77,20,3,15,12,46,40,23,88,21], 7, [342,344,354,324,378,376,420,349,340,258,229,185,213,159,227,245,234,232,273,304,317,243,255]),
            # ([16,73,66,19,28,18,29,55,43,14,56,17,89,80,96,55,43,95,88,79,100,50,3,74,91,90,58,10,9,15,78,83,32,22,16,20,29,31,94,8,46,51], 32, [1736,1685,1635,1636,1637,1650,1715,1668,1671,1708,1668,1724,1701,1640,1572,1535,1521,1481,1436,1371,1327,1294,1380,1386,1391,1356,1341,1426,1505,1569,1591,1558,1529,1581,1656,1726,1755,1734,1649,1656,1688,1720]),
            # ([50,19,68,88,5,42,99,84,39,10,46,83,11,42,66,60,22,54,89,38,3,40,27,22,62,8,100,17,91,93,34,15,68,10,95,57,61,52,73,44,52,13,50,80,44,10,40,44,87,97,47,100,42,57,99,90,94,91,63,59,99,73,62,25,51,81,34,92,51,37,79,87,83], 30, [1462,1458,1458,1380,1470,1485,1447,1415,1449,1483,1489,1419,1458,1496,1474,1424,1442,1432,1430,1489,1533,1593,1608,1643,1680,1762,1756,1830,1802,1768,1833,1891,1885,1900,1856,1880,1853,1893,1871,1864,1891,1965,1998,1968,1943,2001,2049,2010,1965,1967,2004,1943,1911,1900,1884,1805,1753,1728,1725,1688,1643,1659,1635,1613,1602,1548,1536,1506,1463,1526,1464,1468,1478]),
            # ([86,38,89,32,71,76,29,32,7,19,81,65,41,56,89,68,42,15,5,77,88,9,94,63,94,39,35,59,25,42,89,77,75,50,89,79,95,67,48,66,60,50,100,99,84,47,10,3,26,83,94,71,33,55,63,25,20,87,76,98,93,53,94,63,25,45,75,97,64,49,29,85,91,68,84,48,7,16,91,37,41,77,41,14,77,19,36,100,33,47,26,23,58,82,65,13,5,72,80], -65, [3751,3748,3707,3701,3666,3689,3699,3668,3650,3557,3477,3474,3492,3523,3576,3639,3624,3572,3516,3488,3510,3535,3519,3593,3569,3587,3528,3470,3476,3407,3386,3450,3482,3482,3435,3460,3490,3556,3538,3495,3493,3469,3471,3564,3647,3640,3650,3619,3545,3530,3599,3616,3668,3665,3620,3650,3628,3622,3686,3704,3720,3748,3788,3877,3868,3813,3772,3809,3817,3849,3827,3780,3836,3895,3956,4021,3988,3930,3905,3940,3888,3861,3896,3922,3931,3931,3862,3889,3895,3865,3818,3805,3793,3792,3849,3872,3796,3724,3721]),
            # ([12,74,27,37,10,19,22,89,39,95,96,10,19,25,53,40,13,85,38,90,38,5,98,24,45,62,52,17,41,41,10,20,14,87,20,92,61,4,83,38,83,67,16,88,2,33,19,97,12,39,18,68,49,21,11,26,8,96,55,84,84,83,93,75,89,10,57,32,31,88,80,61,25,13,6,68,26,49,29,23,33,74,94,45,85,20,40,50,48,34,60,87,32,74,78,25,91,85,54,21], 99, [4777,4715,4762,4752,4779,4770,4767,4700,4750,4694,4693,4779,4770,4764,4736,4749,4776,4704,4751,4699,4751,4784,4691,4765,4744,4727,4737,4772,4748,4748,4779,4769,4775,4702,4769,4697,4728,4785,4706,4751,4706,4722,4773,4701,4787,4756,4770,4692,4777,4750,4771,4721,4740,4768,4778,4763,4781,4693,4734,4705,4705,4706,4696,4714,4700,4779,4732,4757,4758,4701,4709,4728,4764,4776,4783,4721,4763,4740,4760,4766,4756,4715,4695,4744,4704,4769,4749,4739,4741,4755,4729,4702,4757,4715,4711,4764,4698,4704,4735,4768]),
        ]:
            output = self.decrypt(code, k)
            self.assertListEqual(expected, output, f"expected: {expected}, output: {output}")
